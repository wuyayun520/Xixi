name: Build and Distribute

on:
  push:
    branches:
      - main

jobs:
  build:
    name: build
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.27.3'
    
      - name: Setup Flutter Environment
        run: |
          flutter clean
          flutter pub get 
      
      # 清除 Xcode 缓存
      - name: Clean Xcode Cache
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf ~/Library/Developer/Xcode/iOS\ DeviceSupport
          rm -rf ~/Library/Developer/Xcode/Archives
          rm -rf ~/Library/Developer/Xcode/Products
          
      # 添加 Xcode 版本选择
      - name: Select Xcode 16.2
        run: sudo xcode-select -s /Applications/Xcode_16.2.app
        
      # 设置 CocoaPods
      # - name: Setup CocoaPods
      #   run: |
      #     cd ios
      #     rm -rf Pods
      #     rm -f Podfile.lock
      #     pod install --repo-update
          
      # 添加详细的环境信息调试步骤
      - name: Print Environment Info
        run: |
          echo "============= Environment Variables ============="
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          FLUTTER_ROOT=$(which flutter | xargs dirname | xargs dirname)
          echo "FLUTTER_ROOT: $FLUTTER_ROOT"
          echo "FLUTTER_APPLICATION_PATH: $GITHUB_WORKSPACE"
          echo "Current Directory: $(pwd)"


      - uses: cedvdb/action-flutter-build-ios@v1
        with:
          build-cmd: |
            flutter build ipa --release --export-options-plist=ios/ExportOptions.plist --no-tree-shake-icons
          certificate-base64: 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


          certificate-password: 111111
          
          provisioning-profile-base64: MIIw/wYJKoZIhvcNAQcCoIIw8DCCMOwCAQExCzAJBgUrDgMCGgUAMIIhDAYJKoZIhvcNAQcBoIIg/QSCIPk8P3htbCB2ZXJzaW9uPSIxLjAiIGVuY29kaW5nPSJVVEYtOCI/Pgo8IURPQ1RZUEUgcGxpc3QgUFVCTElDICItLy9BcHBsZS8vRFREIFBMSVNUIDEuMC8vRU4iICJodHRwOi8vd3d3LmFwcGxlLmNvbS9EVERzL1Byb3BlcnR5TGlzdC0xLjAuZHRkIj4KPHBsaXN0IHZlcnNpb249IjEuMCI+CjxkaWN0PgoJPGtleT5BcHBJRE5hbWU8L2tleT4KCTxzdHJpbmc+Y29tOFI0VEY3M0FGVzwvc3RyaW5nPgoJPGtleT5BcHBsaWNhdGlvbklkZW50aWZpZXJQcmVmaXg8L2tleT4KCTxhcnJheT4KCTxzdHJpbmc+OFI0VEY3M0FGVzwvc3RyaW5nPgoJPC9hcnJheT4KCTxrZXk+Q3JlYXRpb25EYXRlPC9rZXk+Cgk8ZGF0ZT4yMDI1LTA4LTA1VDAzOjAyOjA1WjwvZGF0ZT4KCTxrZXk+UGxhdGZvcm08L2tleT4KCTxhcnJheT4KCQk8c3RyaW5nPmlPUzwvc3RyaW5nPgoJCTxzdHJpbmc+eHJPUzwvc3RyaW5nPgoJCTxzdHJpbmc+dmlzaW9uT1M8L3N0cmluZz4KCTwvYXJyYXk+Cgk8a2V5PklzWGNvZGVNYW5hZ2VkPC9rZXk+Cgk8ZmFsc2UvPgoJPGtleT5EZXZlbG9wZXJDZXJ0aWZpY2F0ZXM8L2tleT4KCTxhcnJheT4KCQk8ZGF0YT5NSUlGd3pDQ0JLdWdBd0lCQWdJUUZXcHhzWUZsY0o1VjJrQzBsUHdYN2pBTkJna3Foa2lHOXcwQkFRc0ZBREIxTVVRd1FnWURWUVFERER0QmNIQnNaU0JYYjNKc1pIZHBaR1VnUkdWMlpXeHZjR1Z5SUZKbGJHRjBhVzl1Y3lCRFpYSjBhV1pwWTJGMGFXOXVJRUYxZEdodmNtbDBlVEVMTUFrR0ExVUVDd3dDUnpNeEV6QVJCZ05WQkFvTUNrRndjR3hsSUVsdVl5NHhDekFKQmdOVkJBWVRBbFZUTUI0WERUSTFNRGd3TlRBeU5EZzFPVm9YRFRJMk1EZ3dOVEF5TkRnMU9Gb3dnWWt4R2pBWUJnb0praWFKay9Jc1pBRUJEQW80VWpSVVJqY3pRVVpYTVRRd01nWURWUVFEREN0QmNIQnNaU0JFYVhOMGNtbGlkWFJwYjI0NklFcHBibk5vZFc4Z1NIVWdLRGhTTkZSR056TkJSbGNwTVJNd0VRWURWUVFMREFvNFVqUlVSamN6UVVaWE1STXdFUVlEVlFRS0RBcEthVzV6YUhWdklFaDFNUXN3Q1FZRFZRUUdFd0pEVGpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTmd4eW0rZjlabHhQOEI2TDRtcXRVQlM5Tk15TlhqaHFTZ1lFMHBVT2F2VGFHaDUvVEYwK3pYbVF4OXpoT0dpZzcwVW1FSnZmejhvUlZ3YUVJYXRuVUhENEw4ZmcwZGJwODBxaUJoUCtnbjdPc0JJbjNwK0VzeDRFZG0vVUhWaFhZZjVHSm5hd2RKd2lKRStTVzhVanZ5RU13T3BKMmc0cGJySkRVWW1tVG93KzZ2ck1qRWUzL1BCOUdYQTk1RzFDOGZsMUhLZHpIOHZ0UHBGSXpoWGZlOWllMlJpWjg2c1N5M2pnRTdnNDk4S3lKM21BYXUyNVdsaFFocHg4NERWZ2J2Rng0bkRZdlNKL3ZnZkpQZjBNRlNKV016RTJCUU4zbzB4OWM5QnFBUVMxYnV6WFpFS2tBdEcxdmVVdVhKQ3RjdXlGcE1DNzlCbG81bXRPRWFFUEUwQ0F3RUFBYU9DQWpnd2dnSTBNQXdHQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVVDZjdBRlpENXIyUUtraEs1SmloakRKZnNwN0l3Y0FZSUt3WUJCUVVIQVFFRVpEQmlNQzBHQ0NzR0FRVUZCekFDaGlGb2RIUndPaTh2WTJWeWRITXVZWEJ3YkdVdVkyOXRMM2QzWkhKbk15NWtaWEl3TVFZSUt3WUJCUVVITUFHR0pXaDBkSEE2THk5dlkzTndMbUZ3Y0d4bExtTnZiUzl2WTNOd01ETXRkM2RrY21jek1EVXdnZ0VlQmdOVkhTQUVnZ0VWTUlJQkVUQ0NBUTBHQ1NxR1NJYjNZMlFGQVRDQi96Q0J3d1lJS3dZQkJRVUhBZ0l3Z2JZTWdiTlNaV3hwWVc1alpTQnZiaUIwYUdseklHTmxjblJwWm1sallYUmxJR0o1SUdGdWVTQndZWEowZVNCaGMzTjFiV1Z6SUdGalkyVndkR0Z1WTJVZ2IyWWdkR2hsSUhSb1pXNGdZWEJ3YkdsallXSnNaU0J6ZEdGdVpHRnlaQ0IwWlhKdGN5QmhibVFnWTI5dVpHbDBhVzl1Y3lCdlppQjFjMlVzSUdObGNuUnBabWxqWVhSbElIQnZiR2xqZVNCaGJtUWdZMlZ5ZEdsbWFXTmhkR2x2YmlCd2NtRmpkR2xqWlNCemRHRjBaVzFsYm5SekxqQTNCZ2dyQmdFRkJRY0NBUllyYUhSMGNITTZMeTkzZDNjdVlYQndiR1V1WTI5dEwyTmxjblJwWm1sallYUmxZWFYwYUc5eWFYUjVMekFXQmdOVkhTVUJBZjhFRERBS0JnZ3JCZ0VGQlFjREF6QWRCZ05WSFE0RUZnUVVWT3NSd3BVcEVGeTFhMXJZazdxNTMwcHo5cHN3RGdZRFZSMFBBUUgvQkFRREFnZUFNQk1HQ2lxR1NJYjNZMlFHQVFjQkFmOEVBZ1VBTUJNR0NpcUdTSWIzWTJRR0FRUUJBZjhFQWdVQU1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQTVDY1dPQ0FqWW9TS2ZDVkN2MjNWQXdaeGR5bUt5ZkdVQTViUmdjYkdWbzJsSmhEVTNkTG9RbnlpWWRicy9CbU9pemd2M3YzYXphYkMxOUtjVGV1WU54M090NFV5YjlMdmhtUkg1ZG9GVjQ2N2NRSlRFMm1KVGkwUVJJaFpUdzFUWTE0bVkvQXFSSDRlMWFveTdKUURrSUk4T1pqRkVyZlJrd3BpNjdLMUJtek5DZGRteWVqTDZTemFLTEQrN2JCRWZyanB5NXJicTB0V2FwaW4rdXdKTlRwdnVtNTVYVVl6OUUvajV6TzRid1R0eGJHNG5MQStLekFSZ0JibDNXNUpHbVRpZTAwUkhzM0VKaHNacCtwT0hSUmtXZ0hQOVFvVUZkZlArY0RNdW5pMnZWZkJFTUpJcm1Cd0d1YWxUVTBnUWIxQ2dNaUVFUFVudUJmbXZZVnEvPC9kYXRhPgoJPC9hcnJheT4KCgk8a2V5PkRFUi1FbmNvZGVkLVByb2ZpbGU8L2tleT4KCTxkYXRhPk1JSU5ud1lKS29aSWh2Y05BUWNDb0lJTmtEQ0NEWXdDQVFFeER6QU5CZ2xnaGtnQlpRTUVBZ0VGQURDQ0Exa0dDU3FHU0liM0RRRUhBYUNDQTBvRWdnTkdNWUlEUWpBTURBZFdaWEp6YVc5dUFnRUJNQTBNQ0ZCUVVVTm9aV05yQVFFQU1CQU1DbFJwYldWVWIweHBkbVVDQWdGc01CTU1Ea2x6V0dOdlpHVk5ZVzVoWjJWa0FRRUFNQllNQ0ZSbFlXMU9ZVzFsREFwS2FXNXphSFZ2SUVoMU1Cb01DVUZ3Y0VsRVRtRnRaUXdOWTI5dE9GSTBWRVkzTTBGR1Z6QWREQXhEY21WaGRHbHZia1JoZEdVWERUSTFNRGd3TlRBek1ESXdOVm93SGd3T1ZHVmhiVWxrWlc1MGFXWnBaWEl3REF3S09GSTBWRVkzTTBGR1Z6QWZEQTVGZUhCcGNtRjBhVzl1UkdGMFpSY05Nall3T0RBMU1ESTBPRFU0V2pBZ0RCZFFjbTltYVd4bFJHbHpkSEpwWW5WMGFXOXVWSGx3WlF3RlUxUlBVa1V3SVF3SVVHeGhkR1p2Y20wd0ZRd0RhVTlUREFSNGNrOVREQWgyYVhOcGIyNVBVekFpREFST1lXMWxEQnBqYjIwNFVqUlVSamN6UVVaWFgyUnBjMTh5TURJMU1EZ3dOVEFyREJ0QmNIQnNhV05oZEdsdmJrbGtaVzUwYVdacFpYSlFjbVZtYVhnd0RBd0tPRkkwVkVZM00wRkdWekFzREFSVlZVbEVEQ1JsTWpReE1XRmpZaTA1TVRNeExUUTRZbUV0WVRjMU5pMDVZMkZsT1RKbU1EWXlNMkV3T3d3VlJHVjJaV3h2Y0dWeVEyVnlkR2xtYVdOaGRHVnpNQ0lFSUxFTWkvdWxhQjJHM3lNeWtCMzQrcmF3RHVJTlpwYWpadlprOUhwU09JNVBNSUlCWlF3TVJXNTBhWFJzWlcxbGJuUnpjSUlCVXdJQkFiQ0NBVXd3TXd3V1lYQndiR2xqWVhScGIyNHRhV1JsYm5ScFptbGxjZ3daT0ZJMFZFWTNNMEZHVnk1amIyMHVPRkkwVkVZM00wRkdWekFkREE5aGNITXRaVzUyYVhKdmJtMWxiblFNQ25CeWIyUjFZM1JwYjI0d0dBd1RZbVYwWVMxeVpYQnZjblJ6TFdGamRHbDJaUUVCL3pBc0RCOWpiMjB1WVhCd2JHVXVaR1YyWld4dmNHVnlMbUZ3Y0d4bGMybG5ibWx1TUFrTUIwUmxabUYxYkhRd0t3d21ZMjl0TG1Gd2NHeGxMbVJsZG1Wc2IzQmxjaTVoYzNOdlkybGhkR1ZrTFdSdmJXRnBibk1NQVNvd01Rd2pZMjl0TG1Gd2NHeGxMbVJsZG1Wc2IzQmxjaTUwWldGdExXbGtaVzUwYVdacFpYSU1DamhTTkZSR056TkJSbGN3RXd3T1oyVjBMWFJoYzJzdFlXeHNiM2NCQVFBd09Rd1dhMlY1WTJoaGFXNHRZV05qWlhOekxXZHliM1Z3Y3pBZkRBdzRValJVUmpjelFVWlhMaW9NRDJOdmJTNWhjSEJzWlM1MGIydGxicUNDQ0R3d2dnSkRNSUlCeWFBREFnRUNBZ2d0eGZ5STBzVkxsVEFLQmdncWhrak9QUVFEQXpCbk1Sc3dHUVlEVlFRRERCSkJjSEJzWlNCU2IyOTBJRU5CSUMwZ1J6TXhKakFrQmdOVkJBc01IVUZ3Y0d4bElFTmxjblJwWm1sallYUnBiMjRnUVhWMGFHOXlhWFI1TVJNd0VRWURWUVFLREFwQmNIQnNaU0JKYm1NdU1Rc3dDUVlEVlFRR0V3SlZVekFlRncweE5EQTBNekF4T0RFNU1EWmFGdzB6T1RBME16QXhPREU1TURaYU1HY3hHekFaQmdOVkJBTU1Fa0Z3Y0d4bElGSnZiM1FnUTBFZ0xTQkhNekVtTUNRR0ExVUVDd3dkUVhCd2JHVWdRMlZ5ZEdsbWFXTmhkR2x2YmlCQmRYUm9iM0pwZEhreEV6QVJCZ05WQkFvTUNrRndjR3hsSUVsdVl5NHhDekFKQmdOVkJBWVRBbFZUTUhZd0VBWUhLb1pJemowQ0FRWUZLNEVFQUNJRFlnQUVtT2t2UFVCeXBPMlRJbktCRXh6ZEVKWHh4YU5PY2R3VUZ0a081YVlGS25ka2UxOU9PTk83SEVTMWYvVWZ0akppWGNucGhGdFBNRThSV2dEOVdGZ01wZlVQTEUwSFJ4TjEycGVYbDI4eFhPMHJuWHNnTzlpNVZObGVtYVE2VVFveG8wSXdRREFkQmdOVkhRNEVGZ1FVdTdEZW9WZ3ppSnFraXBuZXZyM3JyOXJMSktzd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBT0JnTlZIUThCQWY4RUJBTUNBUVl3Q2dZSUtvWkl6ajBFQXdNRGFBQXdaUUl4QUlQcHdjUVdYaHBkTkJqWjdlLzBiQTRBUmt1NDM3SkdFY1VQL2VaNmpLR21hODdDQTlTYzlaUEdkTGhxMzZvakZRSXdiV2FLRU1yVURkUlB6WTFEUHJTS1k2VXpidU50MmhlM1pCL0lVeWI1aUdKME9Rc1hXOHRScUF6b0dBUG5vcklvTUlJQzVqQ0NBbTJnQXdJQkFnSUlNdzN1K0w5TWFDNHdDZ1lJS29aSXpqMEVBd013WnpFYk1Ca0dBMVVFQXd3U1FYQndiR1VnVW05dmRDQkRRU0F0SUVjek1TWXdKQVlEVlFRTERCMUJjSEJzWlNCRFpYSjBhV1pwWTJGMGFXOXVJRUYxZEdodmNtbDBlVEVUTUJFR0ExVUVDZ3dLUVhCd2JHVWdTVzVqTGpFTE1Ba0dBMVVFQmhNQ1ZWTXdIaGNOTVRjd01qSXlNakl5TXpJeVdoY05Nekl3TWpFNE1EQXdNREF3V2pCeU1TWXdKQVlEVlFRRERCMUJjSEJzWlNCVGVYTjBaVzBnU1c1MFpXZHlZWFJwYjI0Z1EwRWdOREVtTUNRR0ExVUVDd3dkUVhCd2JHVWdRMlZ5ZEdsbWFXTmhkR2x2YmlCQmRYUm9iM0pwZEhreEV6QVJCZ05WQkFvTUNrRndjR3hsSUVsdVl5NHhDekFKQmdOVkJBWVRBbFZUTUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFQm11a1ZtOTlueWZSemphT2todFd6VlEyWkVySmxHaVorc2tnZnVMMVdBL2M0bXJyR1Vjdkx1ODdwQUcwQVJORWZGb21yYUNjS1NXSzVlWUdiMDk4V3FPQjl6Q0I5REFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQjhHQTFVZEl3UVlNQmFBRkx1dzNxRllNNGlhcElxWjNyNjk2Ni9heXlTck1FWUdDQ3NHQVFVRkJ3RUJCRG93T0RBMkJnZ3JCZ0VGQlFjd0FZWXFhSFIwY0RvdkwyOWpjM0F1WVhCd2JHVXVZMjl0TDI5amMzQXdNeTFoY0hCc1pYSnZiM1JqWVdjek1EY0dBMVVkSHdRd01DNHdMS0Fxb0NpR0ptaDBkSEE2THk5amNtd3VZWEJ3YkdVdVkyOXRMMkZ3Y0d4bGNtOXZkR05oWnpNdVkzSnNNQjBHQTFVZERnUVdCQlI2UjdvNGloVWtTQ0pHemI2UEdpUjdOQU1xYVRBT0JnTlZIUThCQWY4RUJBTUNBUVl3RUFZS0tvWklodmRqWkFZQ0VRUUNCUUF3Q2dZSUtvWkl6ajBFQXdNRFp3QXdaQUl3RlF5cGpzYXZsbWxycDUvZFhOUURXV3l1VXRSZ3hvdDI0TGZGb3ZFSmZPQ2E0MnV4NDN3eHhDZDZwNDZKL2F0M0FqQmhNeUR4S2YvNWh6S3VLY2hrUFhaN1VhVFNBaTkydm1BaWtmSFZPblhjdE9MR0twYit4Z25jU2svVkpQRDh5ckl3Z2dNSE1JSUNyYUFEQWdFQ0FnZ1hnS2cwWm1UcXl6QUtCZ2dxaGtqT1BRUURBakJ5TVNZd0pBWURWUVFEREIxQmNIQnNaU0JUZVhOMFpXMGdTVzUwWldkeVlYUnBiMjRnUTBFZ05ERW1NQ1FHQTFVRUN3d2RRWEJ3YkdVZ1EyVnlkR2xtYVdOaGRHbHZiaUJCZFhSb2IzSnBkSGt4RXpBUkJnTlZCQW9NQ2tGd2NHeGxJRWx1WXk0eEN6QUpCZ05WQkFZVEFsVlRNQjRYRFRJME1URXlNREF6TWpBME5Wb1hEVEk0TVRJeE5ERTRNREF6TUZvd1RqRXFNQ2dHQTFVRUF3d2hWMWRFVWlCUWNtOTJhWE5wYjI1cGJtY2dVSEp2Wm1sc1pTQlRhV2R1YVc1bk1STXdFUVlEVlFRS0RBcEJjSEJzWlNCSmJtTXVNUXN3Q1FZRFZRUUdFd0pWVXpCWk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMElBQlBXVVd3N0IxRlEvR2Q1R1lDVmZQbzRwejJ4UGs5VWN0MzIyVWw4ZjRmdGpBYktDRzZpaFRyVFQ3ZTlXdVJmVW1NMWd0ODVPcWJjNlYzWlQ2RE5EcjMyamdnRlBNSUlCU3pBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVlNQmFBRkhwSHVqaUtGU1JJSWtiTnZvOGFKSHMwQXlwcE1FRUdDQ3NHQVFVRkJ3RUJCRFV3TXpBeEJnZ3JCZ0VGQlFjd0FZWWxhSFIwY0RvdkwyOWpjM0F1WVhCd2JHVXVZMjl0TDI5amMzQXdNeTFoYzJsallUUXdNekNCbGdZRFZSMGdCSUdPTUlHTE1JR0lCZ2txaGtpRzkyTmtCUUV3ZXpCNUJnZ3JCZ0VGQlFjQ0FqQnRER3RVYUdseklHTmxjblJwWm1sallYUmxJR2x6SUhSdklHSmxJSFZ6WldRZ1pYaGpiSFZ6YVhabGJIa2dabTl5SUdaMWJtTjBhVzl1Y3lCcGJuUmxjbTVoYkNCMGJ5QkJjSEJzWlNCUWNtOWtkV04wY3lCaGJtUXZiM0lnUVhCd2JHVWdjSEp2WTJWemMyVnpMakFkQmdOVkhRNEVGZ1FVNlZMT0RiREdpQnBsU3JpYkVZL3gzQjVIRkh3d0RnWURWUjBQQVFIL0JBUURBZ2VBTUE4R0NTcUdTSWIzWTJRTUV3UUNCUUF3Q2dZSUtvWkl6ajBFQXdJRFNBQXdSUUloQU8rYXZGMmdXbVpzWkxuTk41T3BVN1EzeGNkczRZUDZGeHJlQ3ozV3EyaG1BaUI0STluRGlBZEpQZlg3aVkrUWJsamdWNTlqLzFqaDFvOWNtR1BXT2o0L25UR0NBZGN3Z2dIVEFnRUJNSDR3Y2pFbU1DUUdBMVVFQXd3ZFFYQndiR1VnVTNsemRHVnRJRWx1ZEdWbmNtRjBhVzl1SUVOQklEUXhKakFrQmdOVkJBc01IVUZ3Y0d4bElFTmxjblJwWm1sallYUnBiMjRnUVhWMGFHOXlhWFI1TVJNd0VRWURWUVFLREFwQmNIQnNaU0JKYm1NdU1Rc3dDUVlEVlFRR0V3SlZVd0lJRjRDb05HWms2c3N3RFFZSllJWklBV1VEQkFJQkJRQ2dnZWt3R0FZSktvWklodmNOQVFrRE1Rc0dDU3FHU0liM0RRRUhBVEFjQmdrcWhraUc5dzBCQ1FVeER4Y05NalV3T0RBMU1ETXdNakExV2pBcUJna3Foa2lHOXcwQkNUUXhIVEFiTUEwR0NXQ0dTQUZsQXdRQ0FRVUFvUW9HQ0NxR1NNNDlCQU1DTUM4R0NTcUdTSWIzRFFFSkJERWlCQ0RRZlk3RG1VbnlZRUtFbStEVkdlMWZFMC9FUG8vellHeWtNbTBCaUpxN3hqQlNCZ2txaGtpRzl3MEJDUTh4UlRCRE1Bb0dDQ3FHU0liM0RRTUhNQTRHQ0NxR1NJYjNEUU1DQWdJQWdEQU5CZ2dxaGtpRzl3MERBZ0lCUURBSEJnVXJEZ01DQnpBTkJnZ3Foa2lHOXcwREFnSUJLREFLQmdncWhrak9QUVFEQWdSSE1FVUNJRHJOa2NENWljTGxRd2x4WTlXWFBQMEM5bFBLRWdQTVUrN2F4YnNPdzA2bUFpRUF2TkFsb0Y5bVZ3TFNXamJIakR3TVJ5Sk1jUkRpSFRnWjJSV3pjTjIzbFdnPTwvZGF0YT4KCQkJCQkJCQkJCQkJCQkJCQkJCgkJCTxrZXk+UFBRQ2hlY2s8L2tleT4KCTxmYWxzZS8+CgoJPGtleT5FbnRpdGxlbWVudHM8L2tleT4KCTxkaWN0PgoJCTxrZXk+YmV0YS1yZXBvcnRzLWFjdGl2ZTwva2V5PgoJCTx0cnVlLz4KCQkJCQoJCQkJPGtleT5hcHMtZW52aXJvbm1lbnQ8L2tleT4KCQk8c3RyaW5nPnByb2R1Y3Rpb248L3N0cmluZz4KCQkJCQoJCQkJPGtleT5jb20uYXBwbGUuZGV2ZWxvcGVyLmFzc29jaWF0ZWQtZG9tYWluczwva2V5PgoJCTxzdHJpbmc+Kjwvc3RyaW5nPgoJCQkJCgkJCQk8a2V5PmFwcGxpY2F0aW9uLWlkZW50aWZpZXI8L2tleT4KCQk8c3RyaW5nPjhSNFRGNzNBRlcuY29tLjhSNFRGNzNBRlc8L3N0cmluZz4KCQkJCQoJCQkJPGtleT5rZXljaGFpbi1hY2Nlc3MtZ3JvdXBzPC9rZXk+CgkJPGFycmF5PgoJCQkJPHN0cmluZz44UjRURjczQUZXLio8L3N0cmluZz4KCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnRva2VuPC9zdHJpbmc+CgkJPC9hcnJheT4KCQkJCQoJCQkJPGtleT5nZXQtdGFzay1hbGxvdzwva2V5PgoJCTxmYWxzZS8+CgkJCQkKCQkJCTxrZXk+Y29tLmFwcGxlLmRldmVsb3Blci50ZWFtLWlkZW50aWZpZXI8L2tleT4KCQk8c3RyaW5nPjhSNFRGNzNBRlc8L3N0cmluZz4KCQkJCQoJCQkJPGtleT5jb20uYXBwbGUuZGV2ZWxvcGVyLmFwcGxlc2lnbmluPC9rZXk+CgkJPGFycmF5PgoJCQkJPHN0cmluZz5EZWZhdWx0PC9zdHJpbmc+CgkJPC9hcnJheT4KCQkKCTwvZGljdD4KCTxrZXk+RXhwaXJhdGlvbkRhdGU8L2tl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

          keychain-password: 111111

      # # 添加检查步骤
      - name: 检查构建文件
        run: |
          echo "检查 build/ios/ipa 目录内容："
          ls -la build/ios/ipa/
          echo "检查 build/ios 目录内容："
          ls -la build/ios/

      - name: Archive IPA
        uses: actions/upload-artifact@v4
        with:
          name: release-ipa
          path: build/ios/ipa


      - name: Upload to App Store using altool
        env:
          IPA_PATH: "build/ios/ipa/xixi.ipa"
          APPLE_ID: "joyvibe501@outlook.com"
          APP_SPECIFIC_PASSWORD: "zfbj-ickf-qfxl-ming"
        run: |
          xcrun altool --upload-app -f "$IPA_PATH" \
            -t ios \
            -u "$APPLE_ID" \
            -p "$APP_SPECIFIC_PASSWORD" \
            --verbose
